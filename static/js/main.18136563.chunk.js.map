{"version":3,"sources":["components/Nav/Nav.js","components/Card/Card.jsx","components/Grid/Col.jsx","components/Grid/Container.jsx","components/Grid/Row.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Nav","_ref","subtitle","score","topScore","react_default","a","createElement","className","Card","props","handlePick","name","image","id","Object","assign","onClick","alt","src","Col","size","children","split","map","join","Container","fluid","concat","Row","shuffle","require","App","state","characters","pickArray","_this","indexOf","push","setState","_this2","this","Container_Container","components_Nav_Nav","Row_Row","Col_Col","character","components_Card_Card","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.18136563.chunk.js","sourcesContent":["\n\nimport React from 'react';\nimport './Nav.css';\n\nconst Nav = ({subtitle, score, topScore}) => (\n\n  <div className=\"nav-header\">\n    <ul>\n      <li>\n        <h1>Memory Clicky</h1>\n      </li>\n      <li>{subtitle}</li>\n      <li>\n        Score: {score} | Top Score: {topScore}\n      </li>\n    </ul>\n  </div>\n);\n\nexport default Nav;\n","\nimport React from 'react';\nimport './Card.css';\n\nconst Card = ({props, handlePick, name, image, id}) => {\n\t\n  return (\n\n    <div {...props} className=\"card\" onClick={ () => handlePick(id) }>\n      <div className=\"img-container\">\n        <img alt={name} src={image} />\n      </div>\n    </div>\n  );\n};\nexport default Card;","\n\n\nimport React from \"react\";\n\n// This Col component lets us size bootstrap columns with less syntax\n// e.g. <Col size=\"md-12\"> instead of <div className=\"col-md-12\">\nexport const Col = ({ size, children }) =>\n\n  <div className={size.split(\" \").map(size => \"col-\" + size).join(\" \")}>\n    {children}\n  </div>;\n","\n\n\nimport React from \"react\";\n\n// This Container component allows us to use a bootstrap container without worrying about class names\nexport const Container = ({ fluid, children }) => (\n\n<div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>\n);","\n\n\nimport React from \"react\";\n\n// This Row component lets us use a bootstrap row without having to think about class names\nexport const Row = ({ fluid, children }) => (\n\n    <div className={`row${fluid ? \"-fluid\" : \"\"}`}>{children}</div>\n);","// React\nimport React, { Component } from 'react';\n// Components\nimport Nav from './components/Nav';\nimport Card from './components/Card';\nimport {Col, Container, Row} from \"./components/Grid\";\n// Characters \nimport characters from './characters.json';\n// Styling\nimport './App.css';\n// shuffles the array\nconst shuffle = require('shuffle-array');\n\nclass App extends Component {\n\n  state = {\n\n    characters,\n    subtitle: 'Click an image to begin!',\n    score: 0,\n    topScore: 0,\n    pickArray: []\n  };\n\n  handlePick = id => {\n\n    if (this.state.pickArray.indexOf(id) === -1) {\n\n      const pickArray = this.state.pickArray;\n      pickArray.push(id);\n\n      this.setState(() => ({ subtitle: 'You Guessed Correctly' }));\n      this.setState(() => ({ pickArray: pickArray }));\n\n      if (this.state.topScore <= this.state.score) {\n\n        this.setState(() => ({ score: this.state.score + 1 }));\n        this.setState({ topScore: this.state.topScore + 1 });\n      } \n      else {\n\n        this.setState(() => ({ score: this.state.score + 1 }));\n      }\n    } \n    else {\n\n      this.setState({ score: 0 });\n      this.setState({ subtitle: 'You Guessed Incorrectly' });\n      this.setState(() => ({ pickArray: [] }));\n    }\n  };\n\n  render() {\n\n    return (\n\n      <Container fluid>\n        <Nav\n          subtitle={this.state.subtitle}\n          score={this.state.score}\n          topScore={this.state.topScore}\n        />\n        <div className=\"main\">\n          <Row>\n            <Col size=\"md-9\">\n              {shuffle(\n                this.state.characters.map(character => (\n\n                  <Card\n                    key={character.id}\n                    id={character.id}\n                    handlePick={this.handlePick}\n                    name={character.name}\n                    image={character.image}\n                    subtitle={this.state.subtitle}\n                    score={this.state.score}\n                    topScore={this.state.topScore}\n                  />\n                ))\n              )}\n            </Col> \n          </Row>\n        </div>\n      </Container>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}